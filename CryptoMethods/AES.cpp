#include "pch.h"

#include "AES.h"

namespace CryptoMethods {

constexpr size_t c_aesblocksize = 16;

constexpr uint8_t Rcon[][4] = {
    {0x01u, 0x00u, 0x00u, 0x00u}, {0x02u, 0x00u, 0x00u, 0x00u},
    {0x04u, 0x00u, 0x00u, 0x00u}, {0x08u, 0x00u, 0x00u, 0x00u},
    {0x10u, 0x00u, 0x00u, 0x00u}, {0x20u, 0x00u, 0x00u, 0x00u},
    {0x40u, 0x00u, 0x00u, 0x00u}, {0x80u, 0x00u, 0x00u, 0x00u},
    {0x1bu, 0x00u, 0x00u, 0x00u}, {0x36u, 0x00u, 0x00u, 0x00u}};

constexpr uint8_t SBox[256] = {
    0x63u, 0x7cu, 0x77u, 0x7bu, 0xf2u, 0x6bu, 0x6fu, 0xc5u, 0x30u, 0x01u, 0x67u,
    0x2bu, 0xfeu, 0xd7u, 0xabu, 0x76u, 0xcau, 0x82u, 0xc9u, 0x7du, 0xfau, 0x59u,
    0x47u, 0xf0u, 0xadu, 0xd4u, 0xa2u, 0xafu, 0x9cu, 0xa4u, 0x72u, 0xc0u, 0xb7u,
    0xfdu, 0x93u, 0x26u, 0x36u, 0x3fu, 0xf7u, 0xccu, 0x34u, 0xa5u, 0xe5u, 0xf1u,
    0x71u, 0xd8u, 0x31u, 0x15u, 0x04u, 0xc7u, 0x23u, 0xc3u, 0x18u, 0x96u, 0x05u,
    0x9au, 0x07u, 0x12u, 0x80u, 0xe2u, 0xebu, 0x27u, 0xb2u, 0x75u, 0x09u, 0x83u,
    0x2cu, 0x1au, 0x1bu, 0x6eu, 0x5au, 0xa0u, 0x52u, 0x3bu, 0xd6u, 0xb3u, 0x29u,
    0xe3u, 0x2fu, 0x84u, 0x53u, 0xd1u, 0x00u, 0xedu, 0x20u, 0xfcu, 0xb1u, 0x5bu,
    0x6au, 0xcbu, 0xbeu, 0x39u, 0x4au, 0x4cu, 0x58u, 0xcfu, 0xd0u, 0xefu, 0xaau,
    0xfbu, 0x43u, 0x4du, 0x33u, 0x85u, 0x45u, 0xf9u, 0x02u, 0x7fu, 0x50u, 0x3cu,
    0x9fu, 0xa8u, 0x51u, 0xa3u, 0x40u, 0x8fu, 0x92u, 0x9du, 0x38u, 0xf5u, 0xbcu,
    0xb6u, 0xdau, 0x21u, 0x10u, 0xffu, 0xf3u, 0xd2u, 0xcdu, 0x0cu, 0x13u, 0xecu,
    0x5fu, 0x97u, 0x44u, 0x17u, 0xc4u, 0xa7u, 0x7eu, 0x3du, 0x64u, 0x5du, 0x19u,
    0x73u, 0x60u, 0x81u, 0x4fu, 0xdcu, 0x22u, 0x2au, 0x90u, 0x88u, 0x46u, 0xeeu,
    0xb8u, 0x14u, 0xdeu, 0x5eu, 0x0bu, 0xdbu, 0xe0u, 0x32u, 0x3au, 0x0au, 0x49u,
    0x06u, 0x24u, 0x5cu, 0xc2u, 0xd3u, 0xacu, 0x62u, 0x91u, 0x95u, 0xe4u, 0x79u,
    0xe7u, 0xc8u, 0x37u, 0x6du, 0x8du, 0xd5u, 0x4eu, 0xa9u, 0x6cu, 0x56u, 0xf4u,
    0xeau, 0x65u, 0x7au, 0xaeu, 0x08u, 0xbau, 0x78u, 0x25u, 0x2eu, 0x1cu, 0xa6u,
    0xb4u, 0xc6u, 0xe8u, 0xddu, 0x74u, 0x1fu, 0x4bu, 0xbdu, 0x8bu, 0x8au, 0x70u,
    0x3eu, 0xb5u, 0x66u, 0x48u, 0x03u, 0xf6u, 0x0eu, 0x61u, 0x35u, 0x57u, 0xb9u,
    0x86u, 0xc1u, 0x1du, 0x9eu, 0xe1u, 0xf8u, 0x98u, 0x11u, 0x69u, 0xd9u, 0x8eu,
    0x94u, 0x9bu, 0x1eu, 0x87u, 0xe9u, 0xceu, 0x55u, 0x28u, 0xdfu, 0x8cu, 0xa1u,
    0x89u, 0x0du, 0xbfu, 0xe6u, 0x42u, 0x68u, 0x41u, 0x99u, 0x2du, 0x0fu, 0xb0u,
    0x54u, 0xbbu, 0x16u};

constexpr uint8_t InvSBox[256] = {
    0x52u, 0x09u, 0x6au, 0xd5u, 0x30u, 0x36u, 0xa5u, 0x38u, 0xbfu, 0x40u, 0xa3u,
    0x9eu, 0x81u, 0xf3u, 0xd7u, 0xfbu, 0x7cu, 0xe3u, 0x39u, 0x82u, 0x9bu, 0x2fu,
    0xffu, 0x87u, 0x34u, 0x8eu, 0x43u, 0x44u, 0xc4u, 0xdeu, 0xe9u, 0xcbu, 0x54u,
    0x7bu, 0x94u, 0x32u, 0xa6u, 0xc2u, 0x23u, 0x3du, 0xeeu, 0x4cu, 0x95u, 0x0bu,
    0x42u, 0xfau, 0xc3u, 0x4eu, 0x08u, 0x2eu, 0xa1u, 0x66u, 0x28u, 0xd9u, 0x24u,
    0xb2u, 0x76u, 0x5bu, 0xa2u, 0x49u, 0x6du, 0x8bu, 0xd1u, 0x25u, 0x72u, 0xf8u,
    0xf6u, 0x64u, 0x86u, 0x68u, 0x98u, 0x16u, 0xd4u, 0xa4u, 0x5cu, 0xccu, 0x5du,
    0x65u, 0xb6u, 0x92u, 0x6cu, 0x70u, 0x48u, 0x50u, 0xfdu, 0xedu, 0xb9u, 0xdau,
    0x5eu, 0x15u, 0x46u, 0x57u, 0xa7u, 0x8du, 0x9du, 0x84u, 0x90u, 0xd8u, 0xabu,
    0x00u, 0x8cu, 0xbcu, 0xd3u, 0x0au, 0xf7u, 0xe4u, 0x58u, 0x05u, 0xb8u, 0xb3u,
    0x45u, 0x06u, 0xd0u, 0x2cu, 0x1eu, 0x8fu, 0xcau, 0x3fu, 0x0fu, 0x02u, 0xc1u,
    0xafu, 0xbdu, 0x03u, 0x01u, 0x13u, 0x8au, 0x6bu, 0x3au, 0x91u, 0x11u, 0x41u,
    0x4fu, 0x67u, 0xdcu, 0xeau, 0x97u, 0xf2u, 0xcfu, 0xceu, 0xf0u, 0xb4u, 0xe6u,
    0x73u, 0x96u, 0xacu, 0x74u, 0x22u, 0xe7u, 0xadu, 0x35u, 0x85u, 0xe2u, 0xf9u,
    0x37u, 0xe8u, 0x1cu, 0x75u, 0xdfu, 0x6eu, 0x47u, 0xf1u, 0x1au, 0x71u, 0x1du,
    0x29u, 0xc5u, 0x89u, 0x6fu, 0xb7u, 0x62u, 0x0eu, 0xaau, 0x18u, 0xbeu, 0x1bu,
    0xfcu, 0x56u, 0x3eu, 0x4bu, 0xc6u, 0xd2u, 0x79u, 0x20u, 0x9au, 0xdbu, 0xc0u,
    0xfeu, 0x78u, 0xcdu, 0x5au, 0xf4u, 0x1fu, 0xddu, 0xa8u, 0x33u, 0x88u, 0x07u,
    0xc7u, 0x31u, 0xb1u, 0x12u, 0x10u, 0x59u, 0x27u, 0x80u, 0xecu, 0x5fu, 0x60u,
    0x51u, 0x7fu, 0xa9u, 0x19u, 0xb5u, 0x4au, 0x0du, 0x2du, 0xe5u, 0x7au, 0x9fu,
    0x93u, 0xc9u, 0x9cu, 0xefu, 0xa0u, 0xe0u, 0x3bu, 0x4du, 0xaeu, 0x2au, 0xf5u,
    0xb0u, 0xc8u, 0xebu, 0xbbu, 0x3cu, 0x83u, 0x53u, 0x99u, 0x61u, 0x17u, 0x2bu,
    0x04u, 0x7eu, 0xbau, 0x77u, 0xd6u, 0x26u, 0xe1u, 0x69u, 0x14u, 0x63u, 0x55u,
    0x21u, 0x0cu, 0x7du};

constexpr uint8_t gmult_2[] = {
    0x00u, 0x02u, 0x04u, 0x06u, 0x08u, 0x0au, 0x0cu, 0x0eu, 0x10u, 0x12u, 0x14u, 0x16u,
    0x18u, 0x1au, 0x1cu, 0x1eu, 0x20u, 0x22u, 0x24u, 0x26u, 0x28u, 0x2au, 0x2cu, 0x2eu,
    0x30u, 0x32u, 0x34u, 0x36u, 0x38u, 0x3au, 0x3cu, 0x3eu, 0x40u, 0x42u, 0x44u, 0x46u,
    0x48u, 0x4au, 0x4cu, 0x4eu, 0x50u, 0x52u, 0x54u, 0x56u, 0x58u, 0x5au, 0x5cu, 0x5eu,
    0x60u, 0x62u, 0x64u, 0x66u, 0x68u, 0x6au, 0x6cu, 0x6eu, 0x70u, 0x72u, 0x74u, 0x76u,
    0x78u, 0x7au, 0x7cu, 0x7eu, 0x80u, 0x82u, 0x84u, 0x86u, 0x88u, 0x8au, 0x8cu, 0x8eu,
    0x90u, 0x92u, 0x94u, 0x96u, 0x98u, 0x9au, 0x9cu, 0x9eu, 0xa0u, 0xa2u, 0xa4u, 0xa6u,
    0xa8u, 0xaau, 0xacu, 0xaeu, 0xb0u, 0xb2u, 0xb4u, 0xb6u, 0xb8u, 0xbau, 0xbcu, 0xbeu,
    0xc0u, 0xc2u, 0xc4u, 0xc6u, 0xc8u, 0xcau, 0xccu, 0xceu, 0xd0u, 0xd2u, 0xd4u, 0xd6u,
    0xd8u, 0xdau, 0xdcu, 0xdeu, 0xe0u, 0xe2u, 0xe4u, 0xe6u, 0xe8u, 0xeau, 0xecu, 0xeeu,
    0xf0u, 0xf2u, 0xf4u, 0xf6u, 0xf8u, 0xfau, 0xfcu, 0xfeu, 0x1bu, 0x19u, 0x1fu, 0x1du,
    0x13u, 0x11u, 0x17u, 0x15u, 0x0bu, 0x09u, 0x0fu, 0x0du, 0x03u, 0x01u, 0x07u, 0x05u,
    0x3bu, 0x39u, 0x3fu, 0x3du, 0x33u, 0x31u, 0x37u, 0x35u, 0x2bu, 0x29u, 0x2fu, 0x2du,
    0x23u, 0x21u, 0x27u, 0x25u, 0x5bu, 0x59u, 0x5fu, 0x5du, 0x53u, 0x51u, 0x57u, 0x55u,
    0x4bu, 0x49u, 0x4fu, 0x4du, 0x43u, 0x41u, 0x47u, 0x45u, 0x7bu, 0x79u, 0x7fu, 0x7du,
    0x73u, 0x71u, 0x77u, 0x75u, 0x6bu, 0x69u, 0x6fu, 0x6du, 0x63u, 0x61u, 0x67u, 0x65u,
    0x9bu, 0x99u, 0x9fu, 0x9du, 0x93u, 0x91u, 0x97u, 0x95u, 0x8bu, 0x89u, 0x8fu, 0x8du,
    0x83u, 0x81u, 0x87u, 0x85u, 0xbbu, 0xb9u, 0xbfu, 0xbdu, 0xb3u, 0xb1u, 0xb7u, 0xb5u,
    0xabu, 0xa9u, 0xafu, 0xadu, 0xa3u, 0xa1u, 0xa7u, 0xa5u, 0xdbu, 0xd9u, 0xdfu, 0xddu,
    0xd3u, 0xd1u, 0xd7u, 0xd5u, 0xcbu, 0xc9u, 0xcfu, 0xcdu, 0xc3u, 0xc1u, 0xc7u, 0xc5u,
    0xfbu, 0xf9u, 0xffu, 0xfdu, 0xf3u, 0xf1u, 0xf7u, 0xf5u, 0xebu, 0xe9u, 0xefu, 0xedu,
    0xe3u, 0xe1u, 0xe7u, 0xe5u};

constexpr uint8_t gmult_3[] = {
    0x00u, 0x03u, 0x06u, 0x05u, 0x0cu, 0x0fu, 0x0au, 0x09u, 0x18u, 0x1bu, 0x1eu, 0x1du,
    0x14u, 0x17u, 0x12u, 0x11u, 0x30u, 0x33u, 0x36u, 0x35u, 0x3cu, 0x3fu, 0x3au, 0x39u,
    0x28u, 0x2bu, 0x2eu, 0x2du, 0x24u, 0x27u, 0x22u, 0x21u, 0x60u, 0x63u, 0x66u, 0x65u,
    0x6cu, 0x6fu, 0x6au, 0x69u, 0x78u, 0x7bu, 0x7eu, 0x7du, 0x74u, 0x77u, 0x72u, 0x71u,
    0x50u, 0x53u, 0x56u, 0x55u, 0x5cu, 0x5fu, 0x5au, 0x59u, 0x48u, 0x4bu, 0x4eu, 0x4du,
    0x44u, 0x47u, 0x42u, 0x41u, 0xc0u, 0xc3u, 0xc6u, 0xc5u, 0xccu, 0xcfu, 0xcau, 0xc9u,
    0xd8u, 0xdbu, 0xdeu, 0xddu, 0xd4u, 0xd7u, 0xd2u, 0xd1u, 0xf0u, 0xf3u, 0xf6u, 0xf5u,
    0xfcu, 0xffu, 0xfau, 0xf9u, 0xe8u, 0xebu, 0xeeu, 0xedu, 0xe4u, 0xe7u, 0xe2u, 0xe1u,
    0xa0u, 0xa3u, 0xa6u, 0xa5u, 0xacu, 0xafu, 0xaau, 0xa9u, 0xb8u, 0xbbu, 0xbeu, 0xbdu,
    0xb4u, 0xb7u, 0xb2u, 0xb1u, 0x90u, 0x93u, 0x96u, 0x95u, 0x9cu, 0x9fu, 0x9au, 0x99u,
    0x88u, 0x8bu, 0x8eu, 0x8du, 0x84u, 0x87u, 0x82u, 0x81u, 0x9bu, 0x98u, 0x9du, 0x9eu,
    0x97u, 0x94u, 0x91u, 0x92u, 0x83u, 0x80u, 0x85u, 0x86u, 0x8fu, 0x8cu, 0x89u, 0x8au,
    0xabu, 0xa8u, 0xadu, 0xaeu, 0xa7u, 0xa4u, 0xa1u, 0xa2u, 0xb3u, 0xb0u, 0xb5u, 0xb6u,
    0xbfu, 0xbcu, 0xb9u, 0xbau, 0xfbu, 0xf8u, 0xfdu, 0xfeu, 0xf7u, 0xf4u, 0xf1u, 0xf2u,
    0xe3u, 0xe0u, 0xe5u, 0xe6u, 0xefu, 0xecu, 0xe9u, 0xeau, 0xcbu, 0xc8u, 0xcdu, 0xceu,
    0xc7u, 0xc4u, 0xc1u, 0xc2u, 0xd3u, 0xd0u, 0xd5u, 0xd6u, 0xdfu, 0xdcu, 0xd9u, 0xdau,
    0x5bu, 0x58u, 0x5du, 0x5eu, 0x57u, 0x54u, 0x51u, 0x52u, 0x43u, 0x40u, 0x45u, 0x46u,
    0x4fu, 0x4cu, 0x49u, 0x4au, 0x6bu, 0x68u, 0x6du, 0x6eu, 0x67u, 0x64u, 0x61u, 0x62u,
    0x73u, 0x70u, 0x75u, 0x76u, 0x7fu, 0x7cu, 0x79u, 0x7au, 0x3bu, 0x38u, 0x3du, 0x3eu,
    0x37u, 0x34u, 0x31u, 0x32u, 0x23u, 0x20u, 0x25u, 0x26u, 0x2fu, 0x2cu, 0x29u, 0x2au,
    0x0bu, 0x08u, 0x0du, 0x0eu, 0x07u, 0x04u, 0x01u, 0x02u, 0x13u, 0x10u, 0x15u, 0x16u,
    0x1fu, 0x1cu, 0x19u, 0x1au};

constexpr uint8_t gmult_9[] = {
    0x00u, 0x09u, 0x12u, 0x1bu, 0x24u, 0x2du, 0x36u, 0x3fu, 0x48u, 0x41u, 0x5au, 0x53u,
    0x6cu, 0x65u, 0x7eu, 0x77u, 0x90u, 0x99u, 0x82u, 0x8bu, 0xb4u, 0xbdu, 0xa6u, 0xafu,
    0xd8u, 0xd1u, 0xcau, 0xc3u, 0xfcu, 0xf5u, 0xeeu, 0xe7u, 0x3bu, 0x32u, 0x29u, 0x20u,
    0x1fu, 0x16u, 0x0du, 0x04u, 0x73u, 0x7au, 0x61u, 0x68u, 0x57u, 0x5eu, 0x45u, 0x4cu,
    0xabu, 0xa2u, 0xb9u, 0xb0u, 0x8fu, 0x86u, 0x9du, 0x94u, 0xe3u, 0xeau, 0xf1u, 0xf8u,
    0xc7u, 0xceu, 0xd5u, 0xdcu, 0x76u, 0x7fu, 0x64u, 0x6du, 0x52u, 0x5bu, 0x40u, 0x49u,
    0x3eu, 0x37u, 0x2cu, 0x25u, 0x1au, 0x13u, 0x08u, 0x01u, 0xe6u, 0xefu, 0xf4u, 0xfdu,
    0xc2u, 0xcbu, 0xd0u, 0xd9u, 0xaeu, 0xa7u, 0xbcu, 0xb5u, 0x8au, 0x83u, 0x98u, 0x91u,
    0x4du, 0x44u, 0x5fu, 0x56u, 0x69u, 0x60u, 0x7bu, 0x72u, 0x05u, 0x0cu, 0x17u, 0x1eu,
    0x21u, 0x28u, 0x33u, 0x3au, 0xddu, 0xd4u, 0xcfu, 0xc6u, 0xf9u, 0xf0u, 0xebu, 0xe2u,
    0x95u, 0x9cu, 0x87u, 0x8eu, 0xb1u, 0xb8u, 0xa3u, 0xaau, 0xecu, 0xe5u, 0xfeu, 0xf7u,
    0xc8u, 0xc1u, 0xdau, 0xd3u, 0xa4u, 0xadu, 0xb6u, 0xbfu, 0x80u, 0x89u, 0x92u, 0x9bu,
    0x7cu, 0x75u, 0x6eu, 0x67u, 0x58u, 0x51u, 0x4au, 0x43u, 0x34u, 0x3du, 0x26u, 0x2fu,
    0x10u, 0x19u, 0x02u, 0x0bu, 0xd7u, 0xdeu, 0xc5u, 0xccu, 0xf3u, 0xfau, 0xe1u, 0xe8u,
    0x9fu, 0x96u, 0x8du, 0x84u, 0xbbu, 0xb2u, 0xa9u, 0xa0u, 0x47u, 0x4eu, 0x55u, 0x5cu,
    0x63u, 0x6au, 0x71u, 0x78u, 0x0fu, 0x06u, 0x1du, 0x14u, 0x2bu, 0x22u, 0x39u, 0x30u,
    0x9au, 0x93u, 0x88u, 0x81u, 0xbeu, 0xb7u, 0xacu, 0xa5u, 0xd2u, 0xdbu, 0xc0u, 0xc9u,
    0xf6u, 0xffu, 0xe4u, 0xedu, 0x0au, 0x03u, 0x18u, 0x11u, 0x2eu, 0x27u, 0x3cu, 0x35u,
    0x42u, 0x4bu, 0x50u, 0x59u, 0x66u, 0x6fu, 0x74u, 0x7du, 0xa1u, 0xa8u, 0xb3u, 0xbau,
    0x85u, 0x8cu, 0x97u, 0x9eu, 0xe9u, 0xe0u, 0xfbu, 0xf2u, 0xcdu, 0xc4u, 0xdfu, 0xd6u,
    0x31u, 0x38u, 0x23u, 0x2au, 0x15u, 0x1cu, 0x07u, 0x0eu, 0x79u, 0x70u, 0x6bu, 0x62u,
    0x5du, 0x54u, 0x4fu, 0x46u};

constexpr uint8_t gmult_11[] = {
    0x00u, 0x0bu, 0x16u, 0x1du, 0x2cu, 0x27u, 0x3au, 0x31u, 0x58u, 0x53u, 0x4eu, 0x45u,
    0x74u, 0x7fu, 0x62u, 0x69u, 0xb0u, 0xbbu, 0xa6u, 0xadu, 0x9cu, 0x97u, 0x8au, 0x81u,
    0xe8u, 0xe3u, 0xfeu, 0xf5u, 0xc4u, 0xcfu, 0xd2u, 0xd9u, 0x7bu, 0x70u, 0x6du, 0x66u,
    0x57u, 0x5cu, 0x41u, 0x4au, 0x23u, 0x28u, 0x35u, 0x3eu, 0x0fu, 0x04u, 0x19u, 0x12u,
    0xcbu, 0xc0u, 0xddu, 0xd6u, 0xe7u, 0xecu, 0xf1u, 0xfau, 0x93u, 0x98u, 0x85u, 0x8eu,
    0xbfu, 0xb4u, 0xa9u, 0xa2u, 0xf6u, 0xfdu, 0xe0u, 0xebu, 0xdau, 0xd1u, 0xccu, 0xc7u,
    0xaeu, 0xa5u, 0xb8u, 0xb3u, 0x82u, 0x89u, 0x94u, 0x9fu, 0x46u, 0x4du, 0x50u, 0x5bu,
    0x6au, 0x61u, 0x7cu, 0x77u, 0x1eu, 0x15u, 0x08u, 0x03u, 0x32u, 0x39u, 0x24u, 0x2fu,
    0x8du, 0x86u, 0x9bu, 0x90u, 0xa1u, 0xaau, 0xb7u, 0xbcu, 0xd5u, 0xdeu, 0xc3u, 0xc8u,
    0xf9u, 0xf2u, 0xefu, 0xe4u, 0x3du, 0x36u, 0x2bu, 0x20u, 0x11u, 0x1au, 0x07u, 0x0cu,
    0x65u, 0x6eu, 0x73u, 0x78u, 0x49u, 0x42u, 0x5fu, 0x54u, 0xf7u, 0xfcu, 0xe1u, 0xeau,
    0xdbu, 0xd0u, 0xcdu, 0xc6u, 0xafu, 0xa4u, 0xb9u, 0xb2u, 0x83u, 0x88u, 0x95u, 0x9eu,
    0x47u, 0x4cu, 0x51u, 0x5au, 0x6bu, 0x60u, 0x7du, 0x76u, 0x1fu, 0x14u, 0x09u, 0x02u,
    0x33u, 0x38u, 0x25u, 0x2eu, 0x8cu, 0x87u, 0x9au, 0x91u, 0xa0u, 0xabu, 0xb6u, 0xbdu,
    0xd4u, 0xdfu, 0xc2u, 0xc9u, 0xf8u, 0xf3u, 0xeeu, 0xe5u, 0x3cu, 0x37u, 0x2au, 0x21u,
    0x10u, 0x1bu, 0x06u, 0x0du, 0x64u, 0x6fu, 0x72u, 0x79u, 0x48u, 0x43u, 0x5eu, 0x55u,
    0x01u, 0x0au, 0x17u, 0x1cu, 0x2du, 0x26u, 0x3bu, 0x30u, 0x59u, 0x52u, 0x4fu, 0x44u,
    0x75u, 0x7eu, 0x63u, 0x68u, 0xb1u, 0xbau, 0xa7u, 0xacu, 0x9du, 0x96u, 0x8bu, 0x80u,
    0xe9u, 0xe2u, 0xffu, 0xf4u, 0xc5u, 0xceu, 0xd3u, 0xd8u, 0x7au, 0x71u, 0x6cu, 0x67u,
    0x56u, 0x5du, 0x40u, 0x4bu, 0x22u, 0x29u, 0x34u, 0x3fu, 0x0eu, 0x05u, 0x18u, 0x13u,
    0xcau, 0xc1u, 0xdcu, 0xd7u, 0xe6u, 0xedu, 0xf0u, 0xfbu, 0x92u, 0x99u, 0x84u, 0x8fu,
    0xbeu, 0xb5u, 0xa8u, 0xa3u};

constexpr uint8_t gmult_13[] = {
    0x00u, 0x0du, 0x1au, 0x17u, 0x34u, 0x39u, 0x2eu, 0x23u, 0x68u, 0x65u, 0x72u, 0x7fu,
    0x5cu, 0x51u, 0x46u, 0x4bu, 0xd0u, 0xddu, 0xcau, 0xc7u, 0xe4u, 0xe9u, 0xfeu, 0xf3u,
    0xb8u, 0xb5u, 0xa2u, 0xafu, 0x8cu, 0x81u, 0x96u, 0x9bu, 0xbbu, 0xb6u, 0xa1u, 0xacu,
    0x8fu, 0x82u, 0x95u, 0x98u, 0xd3u, 0xdeu, 0xc9u, 0xc4u, 0xe7u, 0xeau, 0xfdu, 0xf0u,
    0x6bu, 0x66u, 0x71u, 0x7cu, 0x5fu, 0x52u, 0x45u, 0x48u, 0x03u, 0x0eu, 0x19u, 0x14u,
    0x37u, 0x3au, 0x2du, 0x20u, 0x6du, 0x60u, 0x77u, 0x7au, 0x59u, 0x54u, 0x43u, 0x4eu,
    0x05u, 0x08u, 0x1fu, 0x12u, 0x31u, 0x3cu, 0x2bu, 0x26u, 0xbdu, 0xb0u, 0xa7u, 0xaau,
    0x89u, 0x84u, 0x93u, 0x9eu, 0xd5u, 0xd8u, 0xcfu, 0xc2u, 0xe1u, 0xecu, 0xfbu, 0xf6u,
    0xd6u, 0xdbu, 0xccu, 0xc1u, 0xe2u, 0xefu, 0xf8u, 0xf5u, 0xbeu, 0xb3u, 0xa4u, 0xa9u,
    0x8au, 0x87u, 0x90u, 0x9du, 0x06u, 0x0bu, 0x1cu, 0x11u, 0x32u, 0x3fu, 0x28u, 0x25u,
    0x6eu, 0x63u, 0x74u, 0x79u, 0x5au, 0x57u, 0x40u, 0x4du, 0xdau, 0xd7u, 0xc0u, 0xcdu,
    0xeeu, 0xe3u, 0xf4u, 0xf9u, 0xb2u, 0xbfu, 0xa8u, 0xa5u, 0x86u, 0x8bu, 0x9cu, 0x91u,
    0x0au, 0x07u, 0x10u, 0x1du, 0x3eu, 0x33u, 0x24u, 0x29u, 0x62u, 0x6fu, 0x78u, 0x75u,
    0x56u, 0x5bu, 0x4cu, 0x41u, 0x61u, 0x6cu, 0x7bu, 0x76u, 0x55u, 0x58u, 0x4fu, 0x42u,
    0x09u, 0x04u, 0x13u, 0x1eu, 0x3du, 0x30u, 0x27u, 0x2au, 0xb1u, 0xbcu, 0xabu, 0xa6u,
    0x85u, 0x88u, 0x9fu, 0x92u, 0xd9u, 0xd4u, 0xc3u, 0xceu, 0xedu, 0xe0u, 0xf7u, 0xfau,
    0xb7u, 0xbau, 0xadu, 0xa0u, 0x83u, 0x8eu, 0x99u, 0x94u, 0xdfu, 0xd2u, 0xc5u, 0xc8u,
    0xebu, 0xe6u, 0xf1u, 0xfcu, 0x67u, 0x6au, 0x7du, 0x70u, 0x53u, 0x5eu, 0x49u, 0x44u,
    0x0fu, 0x02u, 0x15u, 0x18u, 0x3bu, 0x36u, 0x21u, 0x2cu, 0x0cu, 0x01u, 0x16u, 0x1bu,
    0x38u, 0x35u, 0x22u, 0x2fu, 0x64u, 0x69u, 0x7eu, 0x73u, 0x50u, 0x5du, 0x4au, 0x47u,
    0xdcu, 0xd1u, 0xc6u, 0xcbu, 0xe8u, 0xe5u, 0xf2u, 0xffu, 0xb4u, 0xb9u, 0xaeu, 0xa3u,
    0x80u, 0x8du, 0x9au, 0x97u};

constexpr uint8_t gmult_14[] = {
    0x00u, 0x0eu, 0x1cu, 0x12u, 0x38u, 0x36u, 0x24u, 0x2au, 0x70u, 0x7eu, 0x6cu, 0x62u,
    0x48u, 0x46u, 0x54u, 0x5au, 0xe0u, 0xeeu, 0xfcu, 0xf2u, 0xd8u, 0xd6u, 0xc4u, 0xcau,
    0x90u, 0x9eu, 0x8cu, 0x82u, 0xa8u, 0xa6u, 0xb4u, 0xbau, 0xdbu, 0xd5u, 0xc7u, 0xc9u,
    0xe3u, 0xedu, 0xffu, 0xf1u, 0xabu, 0xa5u, 0xb7u, 0xb9u, 0x93u, 0x9du, 0x8fu, 0x81u,
    0x3bu, 0x35u, 0x27u, 0x29u, 0x03u, 0x0du, 0x1fu, 0x11u, 0x4bu, 0x45u, 0x57u, 0x59u,
    0x73u, 0x7du, 0x6fu, 0x61u, 0xadu, 0xa3u, 0xb1u, 0xbfu, 0x95u, 0x9bu, 0x89u, 0x87u,
    0xddu, 0xd3u, 0xc1u, 0xcfu, 0xe5u, 0xebu, 0xf9u, 0xf7u, 0x4du, 0x43u, 0x51u, 0x5fu,
    0x75u, 0x7bu, 0x69u, 0x67u, 0x3du, 0x33u, 0x21u, 0x2fu, 0x05u, 0x0bu, 0x19u, 0x17u,
    0x76u, 0x78u, 0x6au, 0x64u, 0x4eu, 0x40u, 0x52u, 0x5cu, 0x06u, 0x08u, 0x1au, 0x14u,
    0x3eu, 0x30u, 0x22u, 0x2cu, 0x96u, 0x98u, 0x8au, 0x84u, 0xaeu, 0xa0u, 0xb2u, 0xbcu,
    0xe6u, 0xe8u, 0xfau, 0xf4u, 0xdeu, 0xd0u, 0xc2u, 0xccu, 0x41u, 0x4fu, 0x5du, 0x53u,
    0x79u, 0x77u, 0x65u, 0x6bu, 0x31u, 0x3fu, 0x2du, 0x23u, 0x09u, 0x07u, 0x15u, 0x1bu,
    0xa1u, 0xafu, 0xbdu, 0xb3u, 0x99u, 0x97u, 0x85u, 0x8bu, 0xd1u, 0xdfu, 0xcdu, 0xc3u,
    0xe9u, 0xe7u, 0xf5u, 0xfbu, 0x9au, 0x94u, 0x86u, 0x88u, 0xa2u, 0xacu, 0xbeu, 0xb0u,
    0xeau, 0xe4u, 0xf6u, 0xf8u, 0xd2u, 0xdcu, 0xceu, 0xc0u, 0x7au, 0x74u, 0x66u, 0x68u,
    0x42u, 0x4cu, 0x5eu, 0x50u, 0x0au, 0x04u, 0x16u, 0x18u, 0x32u, 0x3cu, 0x2eu, 0x20u,
    0xecu, 0xe2u, 0xf0u, 0xfeu, 0xd4u, 0xdau, 0xc8u, 0xc6u, 0x9cu, 0x92u, 0x80u, 0x8eu,
    0xa4u, 0xaau, 0xb8u, 0xb6u, 0x0cu, 0x02u, 0x10u, 0x1eu, 0x34u, 0x3au, 0x28u, 0x26u,
    0x7cu, 0x72u, 0x60u, 0x6eu, 0x44u, 0x4au, 0x58u, 0x56u, 0x37u, 0x39u, 0x2bu, 0x25u,
    0x0fu, 0x01u, 0x13u, 0x1du, 0x47u, 0x49u, 0x5bu, 0x55u, 0x7fu, 0x71u, 0x63u, 0x6du,
    0xd7u, 0xd9u, 0xcbu, 0xc5u, 0xefu, 0xe1u, 0xf3u, 0xfdu, 0xa7u, 0xa9u, 0xbbu, 0xb5u,
    0x9fu, 0x91u, 0x83u, 0x8du};

/*
inline uint8_t gmult(uint8_t a, uint8_t b) {
    uint8_t p = 0, hbs = 0;
    for (size_t i = 0; i < 8; i++) {
        if (b & 1) p ^= a;

        hbs = a & 0x80;
        a <<= 1;
        if (hbs) a ^= 0x1b;
        b >>= 1;
    }

    return (uint8_t)p;
}
*/

inline void subbytes(uint8_t *state, const uint8_t *box) {
    for (size_t i = 0; i < 16; ++i) {
        state[i] = box[state[i]];
    }
}

inline void shiftrows(uint8_t *state) {
    uint8_t tmp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = tmp;

    tmp = state[2];
    state[2] = state[10];
    state[10] = tmp;
    tmp = state[6];
    state[6] = state[14];
    state[14] = tmp;

    tmp = state[3];
    state[3] = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = tmp;
}

inline void rshiftrows(uint8_t *state) {
    uint8_t tmp = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = tmp;

    tmp = state[2];
    state[2] = state[10];
    state[10] = tmp;
    tmp = state[6];
    state[6] = state[14];
    state[14] = tmp;

    tmp = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = state[3];
    state[3] = tmp;
}

inline void mixcolumns(uint8_t *state) {
    uint8_t tmp[4];
    for (size_t i = 0; i < 4; ++i) {
        /*
        tmp[0] = gmult(2, state[4 * i]) ^ gmult(3, state[4 * i + 1]) ^
                 gmult(1, state[4 * i + 2]) ^ gmult(1, state[4 * i + 3]);
        tmp[1] = gmult(1, state[4 * i]) ^ gmult(2, state[4 * i + 1]) ^
                 gmult(3, state[4 * i + 2]) ^ gmult(1, state[4 * i + 3]);
        tmp[2] = gmult(1, state[4 * i]) ^ gmult(1, state[4 * i + 1]) ^
                 gmult(2, state[4 * i + 2]) ^ gmult(3, state[4 * i + 3]);
        tmp[3] = gmult(3, state[4 * i]) ^ gmult(1, state[4 * i + 1]) ^
                 gmult(1, state[4 * i + 2]) ^ gmult(2, state[4 * i + 3]);
        */
        tmp[0] = gmult_2[state[4 * i]] ^ gmult_3[state[4 * i + 1]] ^
                 state[4 * i + 2] ^ state[4 * i + 3];
        tmp[1] = state[4 * i] ^ gmult_2[state[4 * i + 1]] ^
                 gmult_3[state[4 * i + 2]] ^ state[4 * i + 3];
        tmp[2] = state[4 * i] ^ state[4 * i + 1] ^
                 gmult_2[state[4 * i + 2]] ^ gmult_3[state[4 * i + 3]];
        tmp[3] = gmult_3[state[4 * i]] ^ state[4 * i + 1] ^
                 state[4 * i + 2] ^ gmult_2[state[4 * i + 3]];
        state[4 * i] = tmp[0];
        state[4 * i + 1] = tmp[1];
        state[4 * i + 2] = tmp[2];
        state[4 * i + 3] = tmp[3];
    }
}

inline void rmixcolumns(uint8_t *state) {
    uint8_t tmp[4];
    for (size_t i = 0; i < 4; ++i) {
        /*
        tmp[0] = gmult(14, state[4 * i]) ^ gmult(11, state[4 * i + 1]) ^
                 gmult(13, state[4 * i + 2]) ^ gmult(9, state[4 * i + 3]);
        tmp[1] = gmult(9, state[4 * i]) ^ gmult(14, state[4 * i + 1]) ^
                 gmult(11, state[4 * i + 2]) ^ gmult(13, state[4 * i + 3]);
        tmp[2] = gmult(13, state[4 * i]) ^ gmult(9, state[4 * i + 1]) ^
                 gmult(14, state[4 * i + 2]) ^ gmult(11, state[4 * i + 3]);
        tmp[3] = gmult(11, state[4 * i]) ^ gmult(13, state[4 * i + 1]) ^
                 gmult(9, state[4 * i + 2]) ^ gmult(14, state[4 * i + 3]);
        */
        tmp[0] = gmult_14[state[4 * i]] ^ gmult_11[state[4 * i + 1]] ^
                 gmult_13[state[4 * i + 2]] ^ gmult_9[state[4 * i + 3]];
        tmp[1] = gmult_9[state[4 * i]] ^ gmult_14[state[4 * i + 1]] ^
                 gmult_11[state[4 * i + 2]] ^ gmult_13[state[4 * i + 3]];
        tmp[2] = gmult_13[state[4 * i]] ^ gmult_9[state[4 * i + 1]] ^
                 gmult_14[state[4 * i + 2]] ^ gmult_11[state[4 * i + 3]];
        tmp[3] = gmult_11[state[4 * i]] ^ gmult_13[state[4 * i + 1]] ^
                 gmult_9[state[4 * i + 2]] ^ gmult_14[state[4 * i + 3]];
        state[4 * i] = tmp[0];
        state[4 * i + 1] = tmp[1];
        state[4 * i + 2] = tmp[2];
        state[4 * i + 3] = tmp[3];
    }
}

inline void addroundkey(uint8_t *state, const uint8_t *word) {
    for (size_t i = 0; i < 16; ++i) {
        state[i] ^= word[i];
    }
}

AES::AES() {
    p_method = enum_crypt_methods_aes;
    p_blocksize = c_aesblocksize;

    p_haskey = false;
}

const size_t AES::KeyLength(size_t *min, size_t *max) {
    if (min != nullptr) {
        *min = 16;
    }
    if (max != nullptr) {
        *max = 32;
    }

    return 16;
}

bool AES::SetKey(const uint8_t *key, const size_t keylen) {
    if (key == nullptr || (keylen != 16 && keylen != 24 && keylen != 32)) {
        return false;
    }

    p_keylen = keylen;
    memcpy(p_key, key, sizeof(uint8_t) * keylen);
    p_rounds = (p_keylen >> 2) + 6;

    bool bRet = KeyExpand();
    if (bRet) {
        p_haskey = true;
    } else {
        p_haskey = false;
    }

    return bRet;
}

bool AES::Encrypt(const uint8_t *plain, uint8_t *cipher) {
    if (!p_haskey) {
        return false;
    }

    memcpy(cipher, plain, sizeof(uint8_t) * 16);

    addroundkey(cipher, p_roundkey);

    for (size_t r = 1; r < p_rounds; ++r) {
        subbytes(cipher, SBox);
        shiftrows(cipher);
        mixcolumns(cipher);
        addroundkey(cipher, p_roundkey + (r << 4));
    }
    subbytes(cipher, SBox);
    shiftrows(cipher);
    addroundkey(cipher, p_roundkey + (p_rounds << 4));

    return true;
}

bool AES::Decrypt(const uint8_t *cipher, uint8_t *plain) {
    if (!p_haskey) {
        return false;
    }

    memcpy(plain, cipher, sizeof(uint8_t) * 16);

    addroundkey(plain, p_roundkey + (p_rounds << 4));

    for (size_t r = p_rounds - 1; r > 0; --r) {
        rshiftrows(plain);
        subbytes(plain, InvSBox);
        addroundkey(plain, p_roundkey + (r << 4));
        rmixcolumns(plain);
    }
    rshiftrows(plain);
    subbytes(plain, InvSBox);
    addroundkey(plain, p_roundkey);

    return true;
}

bool AES::KeyExpand() {
    p_roundkeylen = (p_rounds + 1) << 2;

    memcpy(p_roundkey, p_key, sizeof(uint8_t) * p_keylen);

    uint32_t mod = p_keylen >> 2;
    for (size_t i = mod; i < p_roundkeylen; ++i) {
        uint8_t temp[4] = {
            p_roundkey[(i - 1) << 2], p_roundkey[((i - 1) << 2) + 1],
            p_roundkey[((i - 1) << 2) + 2], p_roundkey[((i - 1) << 2) + 3]};
        if (!(i % mod)) {
            uint8_t tmp = temp[0];
            temp[0] = temp[1];
            temp[1] = temp[2];
            temp[2] = temp[3];
            temp[3] = tmp;

            temp[0] = SBox[temp[0]];
            temp[1] = SBox[temp[1]];
            temp[2] = SBox[temp[2]];
            temp[3] = SBox[temp[3]];

            temp[0] ^= Rcon[i / mod - 1][0];
            temp[1] ^= Rcon[i / mod - 1][1];
            temp[2] ^= Rcon[i / mod - 1][2];
            temp[3] ^= Rcon[i / mod - 1][3];
        } else if ((mod == 8) && ((i % mod) == 4)) {
            temp[0] = SBox[temp[0]];
            temp[1] = SBox[temp[1]];
            temp[2] = SBox[temp[2]];
            temp[3] = SBox[temp[3]];
        }

        p_roundkey[i << 2] = temp[0] ^ p_roundkey[(i - mod) << 2];
        p_roundkey[(i << 2) + 1] = temp[1] ^ p_roundkey[((i - mod) << 2) + 1];
        p_roundkey[(i << 2) + 2] = temp[2] ^ p_roundkey[((i - mod) << 2) + 2];
        p_roundkey[(i << 2) + 3] = temp[3] ^ p_roundkey[((i - mod) << 2) + 3];
    }

    return true;
}

} // namespace CryptoMethods
